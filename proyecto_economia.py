# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yK8TE0ENxzsrouYvj9XEEeG07go15IJV
"""

#Propuesta Final uniendo todo


# PROGRAMA DE ANÁLISIS ECONÓMICO: PIB e Inflación de Colombia, México y USA durante 1960 al 2023
# Este programa descarga datos reales del Banco Mundial de PIB per cápita e Inflación
# Se conecta a la API oficial: http://api.worldbank.org

import requests                    # Librería que sirve para conectarse a la API del Banco Mundial y pedir datos
import pandas as pd                # Librería para manejar los datos en tablas (DataFrames)
import numpy as np                 # Librería para hacer cálculos numéricos y estadísticos rápidos
import matplotlib.pyplot as plt    # Para hacer gráficas bonitas

# Diccionario con los indicadores que vamos a consultar en el Banco Mundial
INDICADORES = {
    "PIB per cápita": "NY.GDP.PCAP.CD",   # Código del PIB per cápita (US$ corrientes)
    "Inflación": "FP.CPI.TOTL.ZG"         # Códido de la Inflación (%anual)
}

# Diccionario con los países (nombre -> código oficial del BM(API))
PAISES = {
    "Colombia": "COL",
    "México": "MEX",
    "Estados Unidos": "USA"
}

# Clase que organiza todo el análisis económico
class AnalisisEconomico:
    def __init__(self, paises, indicadores):
        """Cuando creo el objeto, guardo los países e indicadores que voy a usar."""
        self.paises = paises
        self.indicadores = indicadores

    def descargar_datos(self, pais, indicador, inicio, fin):
        """Función que descarga los datos de la API del Banco Mundial para un país e indicador."""

        codigo_pais = self.paises[pais]  # Saco el código oficial del país

        # Construyo la URL para pedir los datos al Banco Mundial (país, indicador y rango de años)
        url = f"http://api.worldbank.org/v2/country/{codigo_pais}/indicator/{indicador}?date={inicio}:{fin}&format=json&per_page=1000"

        # Le pido la info al servidor
        respuesta = requests.get(url)

        datos_json = respuesta.json()      # Paso la respuesta a formato JSON

        # Si el JSON está vacío o no hay datos, devuelvo tabla vacía
        if len(datos_json) < 2 or not datos_json[1]:
            print(f"No se encontraron datos para {pais}.")
            return pd.DataFrame()

        # LIST COMPREHENSION: aquí limpio los datos y creo lista de diccionarios con año y valor (si no es nulo)
        registros = [
            {"Año": int(item["date"]), pais: item["value"]}
            for item in datos_json[1] if item["value"] != None]


        # Convierto la lista de registros en un DataFrame ordenado por año
        df = pd.DataFrame(registros).sort_values("Año").reset_index(drop=True)
        return df

    def combinar_datos(self, indicador, inicio, fin):
        """Combina los datos de varios países en un solo DataFrame (tabla grande)."""

        dfs = []  # Lista vacía para ir guardando cada DataFrame
        for pais in self.paises:  # Recorro cada país y descargo sus datos
            df = self.descargar_datos(pais, indicador, inicio, fin)
            if not df.empty: #Si no está vacío
                dfs.append(df)

        # Si sí hay datos, los uno en un solo DataFrame
        if dfs:
            df_final = dfs[0]
            for df in dfs[1:]:
                df_final = pd.merge(df_final, df, on="Año", how="outer")
            return df_final.sort_values("Año").reset_index(drop=True)
        else:
            return pd.DataFrame() #Si no hay datos devuelve vacio

    def generar_grafico(self, df, variable):
        """Hace un gráfico de la evolución en el tiempo para cada país."""

        plt.figure(figsize=(10, 5))  # Tamaño del gráfico
        for pais in self.paises:     # Pinto cada país
            if pais in df.columns:   # Si el pais tiene datos
                plt.plot(df["Año"], df[pais], marker="o", linestyle="-", label=pais)

        plt.title(f"Evolución de {variable}")  # Título del gráfico
        plt.xlabel("Año")                      # Eje X
        plt.ylabel(variable)                   # Eje Y
        plt.legend()                           # Muestra nombres de paises
        plt.show()                             # Muestro la gráfica

    def estadisticas_numpy(self, df, variable):
        """Saca estadísticas básicas con Numpy y las imprime."""

        print(f"\nEstadísticas de {variable} con Numpy:")

        for pais in self.paises:
            if pais in df.columns:
                valores = np.array(df[pais].dropna())  # Paso los datos a Numpy

                if valores.size > 0:  # Solo si hay datos
                    promedio = np.mean(valores)     # Promedio
                    mediana = np.median(valores)    # Mediana
                    maximo = np.max(valores)        # Valor máximo
                    minimo = np.min(valores)        # Valor mínimo

                    print(f" {pais}: promedio={promedio:.2f}, mediana={mediana:.2f}, "
                          f"máximo={maximo:.2f}, mínimo={minimo:.2f}")


def pide_anos():
    """Función que pide al usuario los años inicial y final y valida la entrada."""
    while True:
        try:
            inicio = int(input("Ingresa año inicial, la base viene desde 1960 (ej:1963)): "))  # Pregunta inicio
            fin = int(input("Ingrese año final, la base va hasta 2023(ej:2021)): "))       # Pregunta fin
            if inicio < 1960 or fin > 2023:                       # Valido límites
                print("Rango fuera de límites. Use entre 1960 y 2023.")
            elif inicio > fin:                                    # Valido coherencia
                print("El año inicial no puede ser mayor que el final.")
            else:
                return inicio, fin
        except ValueError:  # Si meten texto y no número, avisa
            print("Por favor ingresa números válidos.")


def main():
    """Función principal que organiza todo el flujo del programa."""

    print("Bienvenido al Análisis Económico con datos del Banco Mundial")
    print("Se analizarán PIB per cápita e Inflación de Colombia, México y Estados Unidos.")

    inicio, fin = pide_anos()  # Pido al usuario el rango de los años

    # Creo un objeto de mi clase AnalisisEconomico (aquí uso la receta)
    analisis = AnalisisEconomico(PAISES, INDICADORES)

    # Recorro cada indicador (PIB, Inflación)
    for variable, indicador in INDICADORES.items():
        print(f"\nDescargando datos de {variable}...")
        df = analisis.combinar_datos(indicador, inicio, fin)

        if not df.empty:
            print(f"\n--- {variable} ---")
            print(df.head())  # Muestro primeras filas del DataFrame

            # Genero gráfico
            analisis.generar_grafico(df, variable)

            # Saco estadísticas con NumPy
            analisis.estadisticas_numpy(df, variable)


# Esto se asegura de que el programa arranque solo si lo ejecutamos directo
if __name__ == "__main__":
    main() # Lama a la función principal cuando se ejecuta el programa
